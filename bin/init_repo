#!/usr/bin/env bash
set -e

function usage() {
  cat <<USAGE >&2
Usage: ${0##*/} PACKAGENAME [REPONAME]

The repository init script. Run this once and remove.

  PACKAGENAME   Package name
  REPONAME      Repository name (defaults to PWD)
  -h            Show help
  -q            Do not output any status messages

USAGE
  exit "${1:-1}"
}


function error() {
  [[ "$QUIET" -ne 1 ]] && >&2 echo "ERROR: $1"
  exit "${2:-1}"
}


function warning() {
  [[ "$QUIET" -ne 1 ]] && >&2 echo "WARNING: $1"
}


function main() {
  PACKAGENAME=$1
  REPONAME=$2
  VERSION="$(date +'%y.%-m').0"

  directories=(src tests)
  for directory in "${directories[@]}"; do
    if [[ -d $directory/PACKAGENAME ]]; then
      git mv "$directory/PACKAGENAME" "$directory/$PACKAGENAME" \
        || warning "$directory/PACKAGENAME does not exist"
    fi
  done

  filenames=(pyproject.toml README.rst)
  for filename in "${filenames[@]}"; do
    if [[ -f $filename ]]; then
      sed -i -e 's/PACKAGENAME/'"$PACKAGENAME"'/g' "$filename"
      sed -i -e 's/REPONAME/'"$REPONAME"'/g' "$filename"
      sed -i -e 's/VERSION/'"$VERSION"'/g' "$filename"
    else
      warning "$filename does not exist"
    fi
  done
}


while getopts "hq" opt; do
  case $opt in
    h)
      usage 0
      ;;
    q)
      QUIET=1
      ;;
    \?)
      usage
      ;;
    :)
      error "option -$opt requires an argument"
      ;;
  esac
done
shift $((OPTIND - 1))

PACKAGENAME=$1
[[ -z $PACKAGENAME ]] && error "PACKAGENAME is required"

REPONAME=${PWD##*/}

main "$PACKAGENAME" "$REPONAME"
